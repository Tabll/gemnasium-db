---
identifier: "CVE-2022-46149"
identifiers:
- "CVE-2022-46149"
- "GHSA-qqff-4vw4-f6hx"
package_slug: "cargo/capnp"
title: "Cap'n Proto and its Rust implementation vulnerable to out-of-bounds read due
  to logic error handling list-of-list"
description: "The Cap'n Proto library and capnp Rust package are vulnerable to out-of-bounds
  read due to logic error handling list-of-list. If a message consumer expects data
  of type \"list of pointers\", and if the consumer performs certain specific actions
  on such data, then a message producer can cause the consumer to read out-of-bounds
  memory. This could trigger a process crash in the consumer, or in some cases could
  allow exfiltration of private in-memory data.\n\nImpact\n======\n\n- Remotely segfault
  a peer by sending it a malicious message, if the victim performs certain actions
  on a list-of-pointer type.\n- Possible exfiltration of memory, if the victim performs
  additional certain actions on a list-of-pointer type.\n- To be vulnerable, an application
  must perform a specific sequence of actions, described below. At present, **we are
  not aware of any vulnerable application**, but we advise updating regardless.\n\nFixed
  in\n========\n\nUnfortunately, the bug is present in inlined code, therefore the
  fix will require rebuilding dependent applications.\n\nC++ fix:\n\n- git commit
  [25d34c67863fd960af34fc4f82a7ca3362ee74b9][0]\n- release 0.11 (future)\n- release
  0.10.3:\n- Unix: https://capnproto.org/capnproto-c++-0.10.3.tar.gz\n- Windows: https://capnproto.org/capnproto-c++-win32-0.10.3.zip\n-
  release 0.9.2:\n- Unix: https://capnproto.org/capnproto-c++-0.9.2.tar.gz\n- Windows:
  https://capnproto.org/capnproto-c++-win32-0.9.2.zip\n- release 0.8.1:\n- Unix: https://capnproto.org/capnproto-c++-0.8.1.tar.gz\n-
  Windows: https://capnproto.org/capnproto-c++-win32-0.8.1.zip\n- release 0.7.1:\n-
  Unix: https://capnproto.org/capnproto-c++-0.7.1.tar.gz\n- Windows: https://capnproto.org/capnproto-c++-win32-0.7.1.zip\n-
  release 0.5.4:\n- Unix: https://capnproto.org/capnproto-c++-0.5.4.tar.gz\n- Windows:
  https://capnproto.org/capnproto-c++-win32-0.5.4.zip\n\nRust fix:\n\n- `capnp` crate
  version `0.15.2`, `0.14.11`, or `0.13.7`\n\n[0]: https://github.com/capnproto/capnproto/commit/25d34c67863fd960af34fc4f82a7ca3362ee74b9\n\nDetails\n=======\n\nA
  specially-crafted pointer could escape bounds checking by exploiting inconsistent
  handling of pointers when a list-of-structs is downgraded to a list-of-pointers.\n\nFor
  an in-depth explanation of how this bug works, see [David Renshaw's blog post](https://dwrensha.github.io/capnproto-rust/2022/11/30/out_of_bounds_memory_access_bug.html).
  This details below focus only on determining whether an application is vulnerable.\n\nIn
  order to be vulnerable, an application must have certain properties.\n\nFirst, the
  application must accept messages with a schema in which a field has list-of-pointer
  type. This includes `List(Text)`, `List(Data)`, `List(List(T))`, or `List(C)` where
  `C` is an interface type. In the following discussion, we will assume this field
  is named `foo`.\n\nSecond, the application must accept a message of this schema
  from a malicious source, where the attacker can maliciously encode the pointer representing
  the field `foo`.\n\nThird, the application must call `getFoo()` to obtain a `List<T>::Reader`
  for the field, and then use it in one of the following two ways:\n\n1. Pass it as
  the parameter to another message's `setFoo()`, thus copying the field into a new
  message. Note that copying the parent struct as a whole will *not* trigger the bug;
  the bug only occurs if the specific field `foo` is get/set on its own.\n\n2. Convert
  it into `AnyList::Reader`, and then attempt to access it through that. This is much
  less likely; very few apps use the `AnyList` API.\n\nThe dynamic API equivalents
  of these actions (`capnp/dynamic.h`) are also affected.\n\nIf the application does
  these steps, the attacker may be able to cause the Cap'n Proto implementation to
  read beyond the end of the message. This could induce a segmentation fault. Or,
  worse, data that happened to be in memory immediately after the message might be
  returned as if it were part of the message. In the latter case, if the application
  then forwards that data back to the attacker or sends it to another third party,
  this could result in exfiltration of secrets.\n\nAny exfiltration of data would
  have the following limitations:\n\n* The attacker could exfiltrate no more than
  512 KiB of memory immediately following the message buffer.\n* The attacker chooses
  in advance how far past the end of the message to read.\n* The attacker's message
  itself must be larger than the exfiltrated data. Note that a sufficiently large
  message buffer will likely be allocated using mmap() in which case the attack will
  likely segfault.\n* The attack can only work if the 8 bytes immediately following
  the exfiltrated data contains a valid in-bounds Cap'n Proto pointer. The easiest
  way to achieve this is if the pointer is null, i.e. 8 bytes of zero.\n* The attacker
  must specify exactly how much data to exfiltrate, so must guess exactly where such
  a valid pointer will exist.\n* If the exfiltrated data is not followed by a valid
  pointer, the attack will throw an exception. If an application has chosen to ignore
  exceptions (e.g. by compiling with `-fno-exceptions` and not registering an alternative
  exception callback) then the attack may be able to proceed anyway."
date: "2022-12-05"
pubdate: "2022-12-05"
affected_range: ">=0.15.0 <0.15.2||>=0.14.0 <0.14.11||<0.13.7"
fixed_versions:
- "0.15.2"
- "0.14.11"
- "0.13.7"
affected_versions: "All versions before 0.13.7, all versions starting from 0.14.0
  before 0.14.11, all versions starting from 0.15.0 before 0.15.2"
not_impacted: "All versions starting from 0.13.7 before 0.14.0, all versions starting
  from 0.14.11 before 0.15.0, all versions starting from 0.15.2"
solution: "Upgrade to versions 0.13.7, 0.14.11, 0.15.2 or above."
urls:
- "https://nvd.nist.gov/vuln/detail/CVE-2022-46149"
- "https://github.com/advisories/GHSA-qqff-4vw4-f6hx"
- "https://github.com/capnproto/capnproto/security/advisories/GHSA-qqff-4vw4-f6hx"
- "https://github.com/capnproto/capnproto/commit/25d34c67863fd960af34fc4f82a7ca3362ee74b9"
- "https://dwrensha.github.io/capnproto-rust/2022/11/30/out_of_bounds_memory_access_bug.html"
- "https://github.com/capnproto/capnproto"
- "https://github.com/capnproto/capnproto/tree/master/security-advisories/2022-11-30-0-pointer-list-bounds.md"
- "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/EAHKLUMJAXJEV5BPBS5XXWBQ3ZTHGOLY"
- "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PTS6TWD6K2NKXLEEFBPROQXMOFUTEYWY"
- "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WKXM4JAFXLTXU5IQB3OUBQVCIICZWGYX"
- "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZOCQQOPMVQOFUWBWAGVGN76OYAV3WXY4"
- "https://rustsec.org/advisories/RUSTSEC-2022-0068.html"
cvss_v3: "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:N/A:L"
uuid: "691da01d-11a8-44b2-b93b-95851c1ef81d"
cwe_ids:
- "CWE-125"
- "CWE-937"
- "CWE-1035"
