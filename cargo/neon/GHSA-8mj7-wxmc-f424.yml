---
identifier: "GHSA-8mj7-wxmc-f424"
identifiers:
- "GHSA-8mj7-wxmc-f424"
package_slug: "cargo/neon"
title: "Use after free in Neon external buffers"
description: "Neon provides functionality for creating JavaScript `ArrayBuffer` (and
  the `Buffer` subtype) instances backed by bytes allocated outside of V8/Node. The
  [`JsArrayBuffer::external`](https://docs.rs/neon/0.10.0/neon/types/struct.JsArrayBuffer.html#method.external)
  and [`JsBuffer::external`](https://docs.rs/neon/0.10.0/neon/types/struct.JsBuffer.html#method.external)
  did not require `T: 'static` prior to Neon `0.10.1`. This allowed creating an externally
  backed buffer from types that may be freed while they are still referenced by a
  JavaScript `ArrayBuffer`.\n\nThe following example demonstrates use after free.
  It compiles on versions `<0.10.1` and fails to compile afterward.\n\n```rust\npub
  fn soundness_hole(mut cx: FunctionContext) -> JsResult<JsArrayBuffer> {\nlet mut
  data = vec![0u8, 1, 2, 3];\n\n// Creating an external from `&mut [u8]` instead of
  `Vec<u8>` since there is a blanket impl\n// of `AsMut<T> for &mut T`\nlet buf =
  JsArrayBuffer::external(&mut cx, data.as_mut_slice());\n\n// `buf` is still holding
  a reference to `data`!\ndrop(data);\n\nOk(buf)\n}\n```"
date: "2022-06-17"
pubdate: "2022-06-17"
affected_range: ">=0.8.0 <0.10.1"
fixed_versions:
- "0.10.1"
affected_versions: "All versions starting from 0.8.0 before 0.10.1"
not_impacted: "All versions before 0.8.0, all versions starting from 0.10.1"
solution: "Upgrade to version 0.10.1 or above."
urls:
- "https://github.com/advisories/GHSA-8mj7-wxmc-f424"
- "https://github.com/neon-bindings/neon/issues/896"
- "https://github.com/neon-bindings/neon"
- "https://rustsec.org/advisories/RUSTSEC-2022-0028.html"
uuid: "97d9effe-a729-4e4d-9255-aaaa7541bc5f"
cwe_ids:
- "CWE-937"
- "CWE-1035"
