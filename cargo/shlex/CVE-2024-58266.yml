---
identifier: "CVE-2024-58266"
identifiers:
- "CVE-2024-58266"
- "GHSA-r7qv-8r2h-pg27"
package_slug: "cargo/shlex"
title: "Multiple issues involving quote API in shlex"
description: "## Issue 1: Failure to quote characters\n\nAffected versions of this
  crate allowed the bytes `{` and `\\xa0` to appear unquoted and unescaped in command
  arguments.\n\nIf the output of `quote` or `join` is passed to a shell, then what
  should be a single command argument could be interpreted as multiple arguments.\n\nThis
  does not *directly* allow arbitrary command execution (you can't inject a command
  substitution or similar).  But depending on the command you're running, being able
  to inject multiple arguments where only one is expected could lead to undesired
  consequences, potentially including arbitrary command execution.\n\nThe flaw was
  corrected in version 1.2.1 by escaping additional characters. Updating to 1.3.0
  is recommended, but 1.2.1 offers a more minimal fix if desired.\n\nWorkaround: Check
  for the bytes `{` and `\\xa0` in `quote`/`join` input or output.\n\n(Note: `{` is
  problematic because it is used for glob expansion.  `\\xa0` is problematic because
  it's treated as a word separator in [specific environments][solved-xa0].)\n\n##
  Issue 2: Dangerous API w.r.t. nul bytes\n\nVersion 1.3.0 deprecates the `quote`
  and `join` APIs in favor of `try_quote` and `try_join`, which behave the same except
  that they have `Result` return type, returning `Err` if the input contains nul bytes.\n\nStrings
  containing nul bytes generally cannot be used in Unix command arguments or environment
  variables, and most shells cannot handle nul bytes even internally.  If you try
  to pass one anyway, then the results might be security-sensitive in uncommon scenarios.
  \ [More details here.][nul-bytes]\n\nDue to the low severity, the behavior of the
  original `quote` and `join` APIs has not changed; they continue to allow nuls.\n\nWorkaround:
  Manually check for nul bytes in `quote`/`join` input or output.\n\n## Issue 3: Lack
  of documentation for interactive shell risks\n\nThe `quote` family of functions
  does not and cannot escape control characters. With non-interactive shells this
  is perfectly safe, as control characters have no special effect.  But if you writing
  directly to the standard input of an interactive shell (or through a pty), then
  control characters [can cause misbehavior including arbitrary command injection.][control-characters]\n\nThis
  is essentially unfixable, and has not been patched.  But as of version 1.3.0, documentation
  has been added.\n\nFuture versions of `shlex` may add API variants that avoid the
  issue at the cost of reduced portability."
date: "2025-07-28"
pubdate: "2024-01-22"
affected_range: "<1.3.0"
fixed_versions:
- "1.3.0"
affected_versions: "All versions before 1.3.0"
not_impacted: "All versions starting from 1.3.0"
solution: "Upgrade to version 1.3.0 or above."
urls:
- "https://nvd.nist.gov/vuln/detail/CVE-2024-58266"
- "https://github.com/advisories/GHSA-r7qv-8r2h-pg27"
- "https://github.com/comex/rust-shlex/security/advisories/GHSA-r7qv-8r2h-pg27"
- "https://github.com/comex/rust-shlex"
- "https://rustsec.org/advisories/RUSTSEC-2024-0006.html"
cvss_v3: "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:N/I:L/A:N"
uuid: "e7118aa7-f9df-4d2b-903e-7c5f082c1dd2"
cwe_ids:
- "CWE-937"
- "CWE-1035"
