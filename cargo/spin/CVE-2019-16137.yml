---
identifier: "CVE-2019-16137"
identifiers:
- "CVE-2019-16137"
- "GHSA-hv7x-f3pv-gpwr"
package_slug: "cargo/spin"
title: "Wrong memory orderings violates mutual exclusion in spin"
description: "Wrong memory orderings inside the RwLock implementation allow for two
  writers to acquire the lock at the same time. The drop implementation used Ordering::Relaxed,
  which allows the compiler or CPU to reorder a mutable access on the locked data
  after the lock has been yielded.\n\nOnly users of the RwLock implementation are
  affected. Users of Once (including users of lazy_static with the spin_no_std feature
  enabled) are NOT affected.\n\nOn strongly ordered CPU architectures like x86, the
  only real way that this would lead to a memory corruption is if the compiler reorders
  an access after the lock is yielded, which is possible but in practice unlikely.
  It is a more serious issue on weakly ordered architectures such as ARM which, except
  in the presence of certain instructions, allow the hardware to decide which accesses
  are seen at what times. Therefore on an ARM system it is likely that using the wrong
  memory ordering would result in a memory corruption, even if the compiler itself
  doesn't reorder the memory accesses in a buggy way."
date: "2023-06-13"
pubdate: "2021-08-25"
affected_range: "<0.5.2"
fixed_versions:
- "0.5.2"
affected_versions: "All versions before 0.5.2"
not_impacted: "All versions starting from 0.5.2"
solution: "Upgrade to version 0.5.2 or above."
urls:
- "https://nvd.nist.gov/vuln/detail/CVE-2019-16137"
- "https://github.com/advisories/GHSA-hv7x-f3pv-gpwr"
- "https://github.com/mvdnes/spin-rs/issues/65"
- "https://github.com/mvdnes/spin-rs/pull/66"
- "https://github.com/mvdnes/spin-rs"
- "https://rustsec.org/advisories/RUSTSEC-2019-0013.html"
cvss_v3: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
uuid: "96169404-bd3e-46e9-9a57-949cee1ede68"
cwe_ids:
- "CWE-662"
- "CWE-937"
- "CWE-1035"
