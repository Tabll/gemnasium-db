---
identifier: "CVE-2023-30624"
identifiers:
- "CVE-2023-30624"
- "GHSA-ch89-5g45-qwc7"
package_slug: "cargo/wasmtime"
title: "Undefined Behavior in Rust runtime functions"
description: "Wasmtime's implementation of managing per-instance state, such as tables
  and memories, contains LLVM-level undefined behavior. This undefined behavior was
  found to cause runtime-level issues when compiled with LLVM 16 which causes some
  writes, which are critical for correctness, to be optimized away. Vulnerable versions
  of Wasmtime compiled with Rust 1.70, which is currently in beta, or later are known
  to have incorrectly compiled functions. Versions of Wasmtime compiled with the current
  Rust stable release, 1.69, and prior are not known at this time to have any issues,
  but can theoretically exhibit potential issues.\n\nThe underlying problem is that
  Wasmtime's runtime state for an instance involves a Rust-defined structure called
  `Instance` which has a trailing `VMContext` structure after it. This `VMContext`
  structure has a runtime-defined layout that is unique per-module. This representation
  cannot be expressed with safe code in Rust so `unsafe` code is required to maintain
  this state. The code doing this, however, has methods which take `&self` as an argument
  but modify data in the `VMContext` part of the allocation. This means that pointers
  derived from `&self` are mutated. This is typically not allowed, except in the presence
  of `UnsafeCell`, in Rust. When compiled to LLVM these functions have `noalias readonly`
  parameters which means it's UB to write through the pointers.\n\nWasmtime's internal
  representation and management of `VMContext` has been updated to use `&mut self`
  methods where appropriate. Additionally verification tools for `unsafe` code in
  Rust, such as `cargo miri`, are planned to be executed on the `main` branch soon
  to fix any Rust-level issues that may be exploited in future compiler versions.\n\nPrecomplied
  binaries available for Wasmtime from GitHub releases have been compiled with at
  most LLVM 15 so are not known to be vulnerable. As mentioned above, however, it's
  still recommended to update."
date: "2025-05-02"
pubdate: "2023-04-27"
affected_range: "<6.0.2||>=7.0.0 <7.0.1||>=8.0.0 <8.0.1"
fixed_versions:
- "6.0.2"
- "7.0.1"
- "8.0.1"
affected_versions: "All versions before 6.0.2, all versions starting from 7.0.0 before
  7.0.1, all versions starting from 8.0.0 before 8.0.1"
not_impacted: "All versions starting from 6.0.2 before 7.0.0, all versions starting
  from 7.0.1 before 8.0.0, all versions starting from 8.0.1"
solution: "Upgrade to versions 6.0.2, 7.0.1, 8.0.1 or above."
urls:
- "https://nvd.nist.gov/vuln/detail/CVE-2023-30624"
- "https://github.com/advisories/GHSA-ch89-5g45-qwc7"
- "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-ch89-5g45-qwc7"
- "https://github.com/bytecodealliance/wasmtime/commit/0977952dcd9d482bff7c288868ccb52769b3a92e"
- "https://github.com/bytecodealliance/wasmtime"
- "https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/ecK-6G2yi90"
- "https://rustsec.org/advisories/RUSTSEC-2023-0092.html"
cvss_v3: "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
uuid: "34147b60-ede3-4b0a-974d-ddc72a896bef"
cwe_ids:
- "CWE-758"
- "CWE-937"
- "CWE-1035"
