---
identifier: "CVE-2024-47763"
identifiers:
- "CVE-2024-47763"
- "GHSA-q8hx-mm92-4wvg"
package_slug: "cargo/wasmtime"
title: "wasmtime has a runtime crash when combining tail calls with trapping imports"
description: "Wasmtime's implementation of WebAssembly tail calls combined with stack
  traces can result in a runtime crash in certain WebAssembly modules. The runtime
  crash may be undefined behavior if Wasmtime was compiled with Rust 1.80 or prior.
  The runtime crash is a deterministic process abort when Wasmtime is compiled with
  Rust 1.81 and later.\n\n[WebAssembly tail calls](https://github.com/webassembly/tail-call)
  are a proposal which relatively recently reached stage 4 in the [standardization
  process](https://github.com/WebAssembly/proposals/). Wasmtime first enabled support
  for tail calls by default [in Wasmtime 21.0.0](https://github.com/bytecodealliance/wasmtime/pull/8540),
  although that release contained a bug where it was only on-by-default for some configurations.
  In [Wasmtime 22.0.0](https://github.com/bytecodealliance/wasmtime/pull/8682) tail
  calls were enabled by default for all configurations.\n\nThe specific crash happens
  when an exported function in a WebAssembly module (or component) performs a `return_call`
  (or `return_call_indirect` or `return_call_ref`) to an imported host function which
  captures a stack trace (for example, the host function raises a trap). In this situation,
  the stack-walking code previously assumed there was always at least one WebAssembly
  frame on the stack but with tail calls that is no longer true. With the tail-call
  proposal it's possible to have an entry trampoline appear as if it directly called
  the exit trampoline. This situation triggers an internal assert in the stack-walking
  code which raises a Rust `panic!()`.\n\nWhen Wasmtime is compiled with Rust versions
  1.80 and prior this means that an `extern \"C\"` function in Rust is raising a `panic!()`.
  This is technically undefined behavior and typically manifests as a process abort
  when the unwinder fails to unwind Cranelift-generated frames. When Wasmtime is compiled
  with Rust versions 1.81 and later this panic becomes a deterministic process abort.\n\nOverall
  the impact of this issue is that this is a denial-of-service vector where a malicious
  WebAssembly module or component can cause the host to crash. There is no other impact
  at this time other than availability of a service as the result of the crash is
  always a crash and no more.\n\nThis issue was discovered by routine fuzzing performed
  by the Wasmtime project via Google's OSS-Fuzz infrastructure. We have no evidence
  that it has ever been exploited by an attacker in the wild."
date: "2024-10-09"
pubdate: "2024-10-09"
affected_range: ">=12.0.0 <21.0.2||>=22.0.0 <22.0.1||>=23.0.0 <23.0.3||>=24.0.0 <24.0.1||>=25.0.0
  <25.0.2"
fixed_versions:
- "21.0.2"
- "22.0.1"
- "23.0.3"
- "24.0.1"
- "25.0.2"
affected_versions: "All versions starting from 12.0.0 before 21.0.2, all versions
  starting from 22.0.0 before 22.0.1, all versions starting from 23.0.0 before 23.0.3,
  all versions starting from 24.0.0 before 24.0.1, all versions starting from 25.0.0
  before 25.0.2"
not_impacted: "All versions before 12.0.0, all versions starting from 21.0.2 before
  22.0.0, all versions starting from 22.0.1 before 23.0.0, all versions starting from
  23.0.3 before 24.0.0, all versions starting from 24.0.1 before 25.0.0, all versions
  starting from 25.0.2"
solution: "Upgrade to versions 21.0.2, 22.0.1, 23.0.3, 24.0.1, 25.0.2 or above."
urls:
- "https://nvd.nist.gov/vuln/detail/CVE-2024-47763"
- "https://github.com/advisories/GHSA-q8hx-mm92-4wvg"
- "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q8hx-mm92-4wvg"
- "https://github.com/bytecodealliance/wasmtime/pull/6774"
- "https://github.com/bytecodealliance/wasmtime/pull/8540"
- "https://github.com/bytecodealliance/wasmtime/pull/8682"
- "https://github.com/bytecodealliance/wasmtime/commit/0ebe54d05f0e1f6c64b7c8bb48c9e9f6c95cacba"
- "https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_tail_call"
- "https://github.com/WebAssembly/proposals"
- "https://github.com/bytecodealliance/wasmtime"
- "https://github.com/webassembly/tail-call"
cvss_v3: "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
uuid: "b705e5ce-133a-447d-a20f-e043970cab16"
cwe_ids:
- "CWE-617"
- "CWE-670"
- "CWE-937"
- "CWE-1035"
