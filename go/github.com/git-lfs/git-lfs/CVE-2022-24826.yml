---
identifier: "CVE-2022-24826"
identifiers:
- "GHSA-6rw3-3whw-jvjj"
- "CVE-2022-24826"
package_slug: "go/github.com/git-lfs/git-lfs"
title: "Improper Neutralization of Special Elements used in an OS Command ('OS Command
  Injection')"
description: "On Windows, if Git LFS operates on a malicious repository with a `..exe`
  file as well as a file named `git.exe`, and `git.exe` is not found in `PATH`, the
  `..exe` program will be executed, permitting the attacker to execute arbitrary code.
  This does not affect Unix systems. Similarly, if the malicious repository contains
  files named `..exe` and `cygpath.exe`, and `cygpath.exe` is not found in `PATH`,
  the `..exe` program will be executed when certain Git LFS commands are run. More
  generally, if the current working directory contains any file with a base name of
  `.` and a file extension from `PATHEXT` (except `.bat` and `.cmd`), and also contains
  another file with the same base name as a program Git LFS intends to execute (such
  as `git`, `cygpath`, or `uname`) and any file extension from `PATHEXT` (including
  `.bat` and `.cmd`), then, on Windows, when Git LFS attempts to execute the intended
  program the `..exe`, `..com`, etc., file will be executed instead, but only if the
  intended program is not found in any directory listed in `PATH`. The vulnerability
  occurs because when Git LFS detects that the program it intends to run does not
  exist in any directory listed in `PATH` then Git LFS passes an empty string as the
  executable file path to the Go `os/exec` package, which contains a bug such that,
  on Windows, it prepends the name of the current working directory (i.e., `.`) to
  the empty string without adding a path separator, and as a result searches in that
  directory for a file with the base name `.` combined with any file extension from
  `PATHEXT`, executing the first one it finds. (The reason `..bat` and `..cmd` files
  are not executed in the same manner is that, although the Go `os/exec` package tries
  to execute them just as it does a `..exe` file, the Microsoft Win32 API `CreateProcess()`
  family of functions have an undocumented feature in that they apparently recognize
  when a caller is attempting to execute a batch script file and instead run the `cmd.exe`
  command interpreter, passing the full set of command line arguments as parameters.
  These are unchanged from the command line arguments set by Git LFS, and as such,
  the intended program's name is the first, resulting in a command line like `cmd.exe
  /c git`, which then fails.) Git LFS has resolved this vulnerability by always reporting
  an error when a program is not found in any directory listed in `PATH` rather than
  passing an empty string to the Go `os/exec` package in this case. The bug in the
  Go `os/exec` package has been reported to the Go project and is expected to be patched
  after this security advisory is published. The problem was introduced in version
  2.12.1 and is patched in version 3.1.3. Users of affected versions should upgrade
  to version 3.1.3. There are currently no known workarounds at this time."
date: "2022-04-22"
pubdate: "2022-04-22"
affected_range: ">=2.12.1 <3.1.3"
fixed_versions:
- "3.1.3"
affected_versions: "All versions starting from 2.12.1 before 3.1.3"
not_impacted: "All versions starting from 3.1.3"
solution: "Upgrade to version 3.1.3 or above."
urls:
- "https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj"
- "https://nvd.nist.gov/vuln/detail/CVE-2022-24826"
- "https://github.com/git-lfs/git-lfs/releases"
- "https://github.com/advisories/GHSA-6rw3-3whw-jvjj"
uuid: "53776609-0c26-4ed3-8aa2-a6da64e9ff9d"
cwe_ids:
- "CWE-1035"
- "CWE-78"
- "CWE-937"
