---
identifier: "GMS-2023-3425"
identifiers:
- "GHSA-7p92-x423-vwj6"
- "GMS-2023-3425"
package_slug: "go/github.com/consensys/gnark"
title: "Plonk verifier KZG multi point verification"
description: "### Impact\n\nThe vulnerability allows a third party to derive a valid
  proof from a valid initial tuple {proof, public_inputs}, corresponding to the same
  public inputs as the initial proof. It is due to a randomness being generated using
  a small part of the scratch memory describing the state, allowing for degrees of
  freedom in the transcript.\n\nNote that the impact is limited to the PlonK verifier
  smart contract.\n\n### Patches\n\nWe still use a hash function on some data to have
  a pseudo rng, but instead of hashing the first 32 bytes of the state (\n` let random
  := mod(keccak256(state, 0x20), r_mod)` )\n\nwe hash the whole state at this point
  of the verifier as if it was a Fiat Shamir transcript:\n```\n mstore(mPtr, mload(add(state,
  STATE_FOLDED_DIGESTS_X)))\n mstore(add(mPtr, 0x20), mload(add(state, STATE_FOLDED_DIGESTS_Y)))\n
  mstore(add(mPtr, 0x40), calldataload(add(aproof, PROOF_BATCH_OPENING_AT_ZETA_X)))\n
  mstore(add(mPtr, 0x60), calldataload(add(aproof, PROOF_BATCH_OPENING_AT_ZETA_Y)))\n
  mstore(add(mPtr, 0x80), calldataload(add(aproof, PROOF_GRAND_PRODUCT_COMMITMENT_X)))\n
  mstore(add(mPtr, 0xa0), calldataload(add(aproof, PROOF_GRAND_PRODUCT_COMMITMENT_Y)))\n
  mstore(add(mPtr, 0xc0), calldataload(add(aproof, PROOF_OPENING_AT_ZETA_OMEGA_X)))\n
  mstore(add(mPtr, 0xe0), calldataload(add(aproof, PROOF_OPENING_AT_ZETA_OMEGA_Y)))\n
  mstore(add(mPtr, 0x100), mload(add(state, STATE_ZETA)))\n mstore(add(mPtr, 0x120),
  mload(add(state, STATE_GAMMA_KZG)))\n let random := staticcall(gas(), 0x2, mPtr,
  0x140, mPtr, 0x20)\n```\n\n### Workarounds\n\nIn the function `batch_verify_multi_points`,
  the variable `random` (corresponding to `u` in the paper, step 12 of the [plonk](https://eprint.iacr.org/2019/953.pdf)
  verification process) should depend on `state_folded_digests_x`, `state_folded_digests_y`,
  `proof_grand_product_commitment_x`, `proof_grand_product_commitment_y` and `state_zeta`
  (by hashing those values for instance).\n"
date: "2024-01-26"
pubdate: "2023-10-17"
affected_range: "<v0.9.1"
fixed_versions:
- "v0.9.1"
affected_versions: "All versions before 0.9.1"
not_impacted: "All versions starting from 0.9.1"
solution: "Upgrade to version 0.9.1 or above."
urls:
- "https://github.com/Consensys/gnark/security/advisories/GHSA-7p92-x423-vwj6"
- "https://github.com/advisories/GHSA-7p92-x423-vwj6"
uuid: "276d8226-39a2-4c89-bcc9-0c5dc52f32ab"
cwe_ids:
- "CWE-1035"
- "CWE-937"
versions:
- number: "v0.9.1"
  commit:
    tags:
    - "v0.9.1"
    sha: "3421eaa7d544286abf3de8c46282b8d4da6d5da0"
    timestamp: "20231016182707"
