---
identifier: "CVE-2022-21728"
identifiers:
- "CVE-2022-21728"
- "GHSA-6gmv-pjp9-p8w8"
package_slug: "pypi/tensorflow-cpu"
title: "Out of bounds read in Tensorflow"
description: "The [implementation of shape inference for `ReverseSequence`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/ops/array_ops.cc#L1636-L1671)
  does not fully validate the value of `batch_dim` and can result in a heap OOB read:\n\n```python\nimport
  tensorflow as tf\n\n@tf.function\ndef test():\ny = tf.raw_ops.ReverseSequence(\ninput
  = ['aaa','bbb'],\nseq_lengths = [1,1,1],\nseq_dim = -10,\nbatch_dim = -10 )\nreturn
  y\n\ntest()\n```\n\nThere is a check to make sure the value of `batch_dim` does
  not go over the rank of the input, but there is no check for negative values:\n\n```cc\nconst
  int32_t input_rank = c->Rank(input);\nif (batch_dim >= input_rank) {\nreturn errors::InvalidArgument(\n\"batch_dim
  must be < input rank: \", batch_dim, \" vs. \", input_rank);\n}\n// ...\n\nDimensionHandle
  batch_dim_dim = c->Dim(input, batch_dim);\n```\n\nNegative dimensions are allowed
  in some cases to mimic Python's negative indexing (i.e., indexing from the end of
  the array), however if the value is too negative then [the implementation of `Dim`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.h#L415-L428)
  would access elements before the start of an array:\n\n```cc\nDimensionHandle Dim(ShapeHandle
  s, int64_t idx) {\nif (!s.Handle() || s->rank_ == kUnknownRank) {\nreturn UnknownDim();\n}\nreturn
  DimKnownRank(s, idx);\n}\nÂ·\nstatic DimensionHandle DimKnownRank(ShapeHandle s,
  int64_t idx) {\nCHECK_NE(s->rank_, kUnknownRank);\nif (idx < 0) {\nreturn s->dims_[s->dims_.size()
  + idx];\n}\nreturn s->dims_[idx];\n}\n```"
date: "2024-11-13"
pubdate: "2022-02-09"
affected_range: "<2.5.3||>=2.6.0,<2.6.3||>=2.7.0,<2.7.1||==2.7.0"
fixed_versions:
- "2.5.3"
- "2.6.3"
- "2.7.1"
affected_versions: "All versions before 2.5.3, all versions starting from 2.6.0 before
  2.6.3, all versions starting from 2.7.0 before 2.7.1, version 2.7.0"
not_impacted: ""
solution: "Upgrade to versions 2.5.3, 2.6.3, 2.7.1 or above."
urls:
- "https://nvd.nist.gov/vuln/detail/CVE-2022-21728"
- "https://github.com/advisories/GHSA-6gmv-pjp9-p8w8"
- "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-6gmv-pjp9-p8w8"
- "https://github.com/tensorflow/tensorflow/commit/37c01fb5e25c3d80213060460196406c43d31995"
- "https://github.com/pypa/advisory-database/tree/main/vulns/tensorflow-cpu/PYSEC-2022-52.yaml"
- "https://github.com/pypa/advisory-database/tree/main/vulns/tensorflow-gpu/PYSEC-2022-107.yaml"
- "https://github.com/tensorflow/tensorflow"
- "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.h#L415-L428"
- "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/ops/array_ops.cc#L1636-L1671"
cvss_v2: "AV:N/AC:L/Au:S/C:P/I:N/A:P"
cvss_v3: "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H"
uuid: "05fcfd73-1b58-4d97-8765-c3a6bf08b0b2"
cwe_ids:
- "CWE-125"
- "CWE-937"
- "CWE-1035"
