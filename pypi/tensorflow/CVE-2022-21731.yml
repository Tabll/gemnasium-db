---
identifier: "CVE-2022-21731"
identifiers:
- "CVE-2022-21731"
- "GHSA-m4hf-j54p-p353"
package_slug: "pypi/tensorflow"
title: "Type confusion leading to segfault in Tensorflow"
description: "The [implementation of shape inference for `ConcatV2`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/common_shape_fns.cc#L1961-L2059)
  can be used to trigger a denial of service attack via a segfault caused by a type
  confusion:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\ny
  = tf.raw_ops.ConcatV2(\nvalues=[[1,2,3],[4,5,6]],\naxis = 0xb500005b)\nreturn y\n\ntest()\n```\n\nThe
  `axis` argument is translated into `concat_dim` in the `ConcatShapeHelper` helper
  function. Then, a value for `min_rank` is computed based on `concat_dim`. This is
  then used to validate that the `values` tensor has at least the required rank:\n\n```cc\nint64_t
  concat_dim;\nif (concat_dim_t->dtype() == DT_INT32) {\nconcat_dim = static_cast<int64_t>(concat_dim_t->flat<int32>()(0));\n}
  else {\nconcat_dim = concat_dim_t->flat<int64_t>()(0);\n}\n\n// Minimum required
  number of dimensions.\nconst int min_rank = concat_dim < 0 ? -concat_dim : concat_dim
  + 1;\n\n// ...\nShapeHandle input = c->input(end_value_index - 1);\nTF_RETURN_IF_ERROR(c->WithRankAtLeast(input,
  min_rank, &input));\n```\n\nHowever, [`WithRankAtLeast`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.cc#L345-L358)
  receives the lower bound as a 64-bits value and then compares it against the maximum
  32-bits integer value that could be represented:\n\n```cc\nStatus InferenceContext::WithRankAtLeast(ShapeHandle
  shape, int64_t rank,\nShapeHandle* out) {\nif (rank > kint32max) {\nreturn errors::InvalidArgument(\"Rank
  cannot exceed kint32max\");\n}\n// ...\n}\n```\n\nDue to the fact that `min_rank`
  is a 32-bits value and the value of `axis`, the `rank` argument is a [negative value](https://godbolt.org/z/Gcr5haMob),
  so the error check is bypassed."
date: "2024-11-13"
pubdate: "2022-02-10"
affected_range: "<2.5.3||>=2.6.0,<2.6.3||>=2.7.0,<2.7.1||==2.7.0"
fixed_versions:
- "2.5.3"
- "2.6.3"
- "2.7.1"
affected_versions: "All versions before 2.5.3, all versions starting from 2.6.0 before
  2.6.3, all versions starting from 2.7.0 before 2.7.1, version 2.7.0"
not_impacted: ""
solution: "Upgrade to versions 2.5.3, 2.6.3, 2.7.1 or above."
urls:
- "https://nvd.nist.gov/vuln/detail/CVE-2022-21731"
- "https://github.com/advisories/GHSA-m4hf-j54p-p353"
- "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-m4hf-j54p-p353"
- "https://github.com/tensorflow/tensorflow/commit/08d7b00c0a5a20926363849f611729f53f3ec022"
- "https://github.com/pypa/advisory-database/tree/main/vulns/tensorflow-cpu/PYSEC-2022-55.yaml"
- "https://github.com/pypa/advisory-database/tree/main/vulns/tensorflow-gpu/PYSEC-2022-110.yaml"
- "https://github.com/tensorflow/tensorflow"
- "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/common_shape_fns.cc#L1961-L2059"
- "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.cc#L345-L358"
cvss_v2: "AV:N/AC:L/Au:S/C:N/I:N/A:P"
cvss_v3: "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
uuid: "5b3354a2-85ab-4206-8f4c-259f9e73555c"
cwe_ids:
- "CWE-754"
- "CWE-843"
- "CWE-937"
- "CWE-1035"
