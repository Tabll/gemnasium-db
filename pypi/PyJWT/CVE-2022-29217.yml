---
identifier: "CVE-2022-29217"
identifiers:
- "CVE-2022-29217"
- "GHSA-ffqj-6fqr-9h24"
package_slug: "pypi/PyJWT"
title: "Key confusion through non-blocklisted public key formats"
description: "_What kind of vulnerability is it? Who is impacted?_\n\nDisclosed by
  Aapo Oksman (Senior Security Specialist, Nixu Corporation).\n\n> PyJWT supports
  multiple different JWT signing algorithms. With JWT, an\n> attacker submitting the
  JWT token can choose the used signing algorithm.\n>\n> The PyJWT library requires
  that the application chooses what algorithms\n> are supported. The application can
  specify\n> \"jwt.algorithms.get_default_algorithms()\" to get support for all\n>
  algorithms. They can also specify a single one of them (which is the\n> usual use
  case if calling jwt.decode directly. However, if calling\n> jwt.decode in a helper
  function, all algorithms might be enabled.)\n>\n> For example, if the user chooses
  \"none\" algorithm and the JWT checker\n> supports that, there will be no signature
  checking. This is a common\n> security issue with some JWT implementations.\n>\n>
  PyJWT combats this by requiring that the if the \"none\" algorithm is\n> used, the
  key has to be empty. As the key is given by the application\n> running the checker,
  attacker cannot force \"none\" cipher to be used.\n>\n> Similarly with HMAC (symmetric)
  algorithm, PyJWT checks that the key is\n> not a public key meant for asymmetric
  algorithm i.e. HMAC cannot be used\n> if the key begins with \"ssh-rsa\". If HMAC
  is used with a public key, the\n> attacker can just use the publicly known public
  key to sign the token\n> and the checker would use the same key to verify.\n>\n>
  \ From PyJWT 2.0.0 onwards, PyJWT supports ed25519 asymmetric algorithm.\n> With
  ed25519, PyJWT supports public keys that start with \"ssh-\", for\n> example \"ssh-ed25519\".\n\n```python\nimport
  jwt\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric
  import ed25519"
date: "2024-10-15"
pubdate: "2022-05-24"
affected_range: ">=1.5.0,<2.4.0"
fixed_versions:
- "2.4.0"
affected_versions: "All versions starting from 1.5.0 before 2.4.0"
not_impacted: "All versions before 1.5.0, all versions starting from 2.4.0"
solution: "Upgrade to version 2.4.0 or above."
urls:
- "https://nvd.nist.gov/vuln/detail/CVE-2022-29217"
- "https://github.com/advisories/GHSA-ffqj-6fqr-9h24"
- "https://github.com/jpadilla/pyjwt/security/advisories/GHSA-ffqj-6fqr-9h24"
- "https://github.com/jpadilla/pyjwt/commit/9c528670c455b8d948aff95ed50e22940d1ad3fc"
- "https://github.com/jpadilla/pyjwt"
- "https://github.com/jpadilla/pyjwt/releases/tag/2.4.0"
- "https://github.com/pypa/advisory-database/tree/main/vulns/pyjwt/PYSEC-2022-202.yaml"
- "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5PK7IQCBVNLYJEFTPHBBPFP72H4WUFNX"
- "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6HIYEYZRQEP6QTHT3EHH3RGFYJIHIMAO"
cvss_v2: "AV:N/AC:L/Au:N/C:N/I:P/A:N"
cvss_v3: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"
uuid: "59197583-2811-4971-b9ab-02960b30ab60"
cwe_ids:
- "CWE-327"
- "CWE-937"
- "CWE-1035"
