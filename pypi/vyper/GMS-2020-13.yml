---
identifier: "GMS-2020-13"
identifiers:
- "GHSA-mr6r-mvw4-736g"
- "GMS-2020-13"
package_slug: "pypi/vyper"
title: "Vyper interfaces returning integer types less than 256 bits can be manipulated
  if uint256 is used"
description: "# VVE-2020-0001\n\nEarlier today, we received a responsible disclosure
  of a potential issue from @montyly (security researcher at @trailofbits) for Vyper
  users who make assumptions about what values certain interface types can return.\n\n###
  Impact\nWe determined the issue to be mild and unlikely to be exploited, with an
  easy workaround while the correct resolution is in process. The issue stems from
  a number of things, which we will detail here.\n\n(1) The ABI Specification is under-defined
  such that function return type is not always reflected in how you use it\n\nThis
  means that a function which returns `uint8` under the hood actually returns a byte
  integer, making it identical to a function that returns `uint256`. This allows users
  to read an interface that returns a `uint8` value to be stored into a `uint256`
  variable without any explicit casting or input validation.\n\n(2) Vyper doesn&#39;t
  have `uint8` types\n\nWhen Vyper was originally created, it only had one numeric
  type, but we added just enough types to be able to work with the majority of ERC
  interfaces that exist.\n\nUnfortunately, we never added `uint8`, because it&#39;s
  only majority usage was for `ERC20.decimals()` as the return type, which isn&#39;t
  reflected in the method ID. Because of (1), it didn&#39;t matter that we didn&#39;t
  have these types implemented because you could capture the return value as `uint256`
  and use it just fine.\n\n(3) `ERC20.decimals()` returns `uint8`\n\n`ERC20.decimal()`
  (which is an optional function) returns a `uint8` type. While it was never intentioned
  to be used directly within a smart contract (hence being optional), someone could
  easily make the decision to rely on it to perform important functionality within
  their Vyper smart contract. This might lead to a scenario where an unexpectedly
  large value (&gt; ) returned by calling this function (which a malicious contract
  writer might write) would allow an attacker to manipulate or bypass certain logic
  depending on this value.\n\nIn summary, because of (1), it isn&#39;t necessary to
  have to cast the return value of a function that returns `uint8` to `uint256`, and
  because of (2) it isn&#39;t possible to have the type system protect against this
  type of error. This could lead to scenarios like (3) where this behavior can be
  exploited.\n\n### Patches\nWe are currently refactoring our typing system so we
  can implement all ABI-compliant integer types, but no currently patched version
  is available that gives users access to the `uint8` type.\n\n### Workarounds\nThere
  is an easy workaround where you should check that the value returned by an interface
  which specifies `uint8` should be checked to be within the bounds of a `uint8` integer.
  As an example:\n\n```python\n...\n# returns uint8, but we implicitly cast to uint256
  without checking\ndecimals: uint256 = ERC20(_token).decimal()\n# FIX: Insert this
  line\nassert decimals &lt; \n...\n```\n\nDepending on how you use this value, it
  may not be necessary to insert this check.\n\n### References\n* [ABI Specification](https://solidity.readthedocs.io/en/latest/abi-spec.html)\n\n###
  For more information\nIf you have any questions or comments about this advisory:\n*
  Chat with us in [our gitter ](https://gitter.im/vyperlang/community)\n* Open an
  issue in [https://github.com/vyperlang/vyper](https://github.com/vyperlang/vyper)\n*
  Email us at [security@vyperlang.org](mailto:security@vyperlang.org)"
date: "2020-03-25"
pubdate: "2020-03-25"
affected_range: "<=0.1.0b16"
fixed_versions: []
affected_versions: "All versions up to 0.1.0b16"
not_impacted: ""
solution: "Unfortunately, there is no solution available yet."
urls:
- "https://github.com/vyperlang/vyper/security/advisories/GHSA-mr6r-mvw4-736g"
- "https://github.com/advisories/GHSA-mr6r-mvw4-736g"
uuid: "d0a7387a-1a87-42e9-ae5d-cf7e69bdafaa"
cwe_ids:
- "CWE-1035"
- "CWE-937"
