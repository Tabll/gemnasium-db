---
identifier: "CVE-2023-39532"
identifiers:
- "CVE-2023-39532"
- "GHSA-9c4h-3f7h-322r"
package_slug: "npm/ses"
title: "Dynamic import and spread operator provide possible path to arbitrary exfiltration
  and execution"
description: "SES is a JavaScript environment that allows safe execution of arbitrary
  programs in Compartments. In version 0.18.0 prior to 0.18.7, 0.17.0 prior to 0.17.1,
  0.16.0 prior to 0.16.1, 0.15.0 prior to 0.15.24, 0.14.0 prior to 0.14.5, an 0.13.0
  prior to 0.13.5, there is a hole in the confinement of guest applications under
  SES that may manifest as either the ability to exfiltrate information or execute
  arbitrary code depending on the configuration and implementation of the surrounding
  host.\n\nGuest program running inside a Compartment with as few as no endowments
  can gain access to the surrounding host’s dynamic import by using dynamic import
  after the spread operator, like `{...import(arbitraryModuleSpecifier)}`.\n\nOn the
  web or in web extensions, a `Content-Security-Policy` following ordinary best practices
  likely mitigates both the risk of exfiltration and execution of arbitrary code,
  at least limiting the modules that the attacker can import to those that are already
  part of the application. However, without a `Content-Security-Policy`, dynamic import
  can be used to issue HTTP requests for either communication through the URL or for
  the execution of code reachable from that origin.\n\nWithin an XS worker, an attacker
  can use the host’s module system to the extent that the host has been configured.
  This typically only allows access to module code on the host’s file system and is
  of limited use to an attacker.\n\nWithin Node.js, the attacker gains access to Node.js’s
  module system. Importing the powerful builtins is not useful except insofar as there
  are side-effects and tempered because dynamic import returns a promise. Spreading
  a promise into an object renders the promises useless. However, Node.js allows importing
  data URLs, so this is a clear path to arbitrary execution.\n\nVersions 0.18.7, 0.17.1,
  0.16.1, 0.15.24, 0.14.5, and 0.13.5 contain a patch for this issue. Some workarounds
  are available. On the web, providing a suitably constrained `Content-Security-Policy`
  mitigates most of the threat. With XS, building a binary that lacks the ability
  to load modules at runtime mitigates the entirety of the threat. That will look
  like an implementation of `fxFindModule` in a file like `xsPlatform.c` that calls
  `fxRejectModuleFile`."
date: "2023-08-15"
pubdate: "2023-08-08"
affected_range: ">=0.13.0 <0.13.5||>=0.14.0 <0.14.5||>=0.15.0 <0.15.24||>=0.16.0 <0.16.1||>=0.17.0
  <0.17.1||>=0.18.0 <0.18.7"
fixed_versions:
- "0.13.5"
- "0.14.5"
- "0.15.24"
- "0.16.1"
- "0.17.1"
- "0.18.7"
affected_versions: "All versions starting from 0.13.0 before 0.13.5, all versions
  starting from 0.14.0 before 0.14.5, all versions starting from 0.15.0 before 0.15.24,
  all versions starting from 0.16.0 before 0.16.1, all versions starting from 0.17.0
  before 0.17.1, all versions starting from 0.18.0 before 0.18.7"
not_impacted: "All versions before 0.13.0, all versions starting from 0.13.5 before
  0.14.0, all versions starting from 0.14.5 before 0.15.0, all versions starting from
  0.15.24 before 0.16.0, all versions starting from 0.16.1 before 0.17.0, all versions
  starting from 0.17.1 before 0.18.0, all versions starting from 0.18.7"
solution: "Upgrade to versions 0.13.5, 0.14.5, 0.15.24, 0.16.1, 0.17.1, 0.18.7 or
  above."
urls:
- "https://nvd.nist.gov/vuln/detail/CVE-2023-39532"
- "https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041"
- "https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r"
cvss_v3: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
uuid: "b8a4fbaf-6de7-48ea-a325-71aa5f82feb2"
cwe_ids:
- "CWE-1035"
- "CWE-937"
