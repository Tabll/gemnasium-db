---
identifier: "CVE-2025-59052"
identifiers:
- "CVE-2025-59052"
- "GHSA-68x2-mx4q-78m7"
package_slug: "npm/@angular/platform-server"
title: "Angular SSR: Global Platform Injector Race Condition Leads to Cross-Request
  Data Leakage"
description: "Angular uses a DI container (the \"platform injector\") to hold request-specific
  state during server-side rendering. For historical reasons, the container was stored
  as a JavaScript module-scoped global variable. When multiple requests are processed
  concurrently, they could inadvertently share or overwrite the global injector state.\n\nIn
  practical terms, this can lead to one request responding with data meant for a completely
  different request, leaking data or tokens included on the rendered page or in response
  headers. As long as an attacker had network access to send any traffic that received
  a rendered response, they may have been able to send a large number of requests
  and then inspect the responses for information leaks.\n\nThe following APIs were
  vulnerable and required SSR-only breaking changes:\n\n* `bootstrapApplication`:
  This function previously implicitly retrieved the last platform injector that was
  created. It now requires an explicit `BootstrapContext` in a server environment.
  This function is only used for standalone applications. NgModule-based applications
  are not affected.\n* `getPlatform`: This function previously returned the last platform
  instance that was created. It now always returns `null` in a server environment.\n*
  `destroyPlatform`: This function previously destroyed the last platform instance
  that was created. It's now a no-op when called in a server environment.\n\nFor `bootstrapApplication`,
  the framework now provides a new argument to the application's bootstrap function:\n\n```ts\n//
  Before:\nconst bootstrap = () => bootstrapApplication(AppComponent, config);\n\n//
  After:\nconst bootstrap = (context: BootstrapContext) =>\nbootstrapApplication(AppComponent,
  config, context);\n```\n\nAs is usually the case for changes to Angular, an automatic
  schematic will take care of these code changes as part of ng update:\n\n```sh"
date: "2025-09-10"
pubdate: "2025-09-10"
affected_range: ">=16.0.0-next.0 <18.2.14||>=20.0.0-next.0 <20.3.0||>=19.0.0-next.0
  <19.2.15||>=21.0.0-next.0 <21.0.0-next.3"
fixed_versions:
- "18.2.14"
- "20.3.0"
- "19.2.15"
- "21.0.0-next.3"
affected_versions: "All versions starting from 16.0.0-next.0 before 18.2.14, all versions
  starting from 19.0.0-next.0 before 19.2.15, all versions starting from 20.0.0-next.0
  before 20.3.0, all versions starting from 21.0.0-next.0 before 21.0.0-next.3"
not_impacted: "All versions before 16.0.0-next.0, all versions starting from 18.2.14
  before 19.0.0-next.0, all versions starting from 19.2.15 before 20.0.0-next.0, all
  versions starting from 20.3.0 before 21.0.0-next.0, all versions starting from 21.0.0-next.3"
solution: "Upgrade to versions 18.2.14, 19.2.15, 20.3.0, 21.0.0-next.3 or above."
urls:
- "https://nvd.nist.gov/vuln/detail/CVE-2025-59052"
- "https://github.com/advisories/GHSA-68x2-mx4q-78m7"
- "https://github.com/angular/angular/security/advisories/GHSA-68x2-mx4q-78m7"
- "https://github.com/angular/angular-cli/pull/31108"
- "https://github.com/angular/angular/pull/63562"
- "https://github.com/angular/angular"
uuid: "ddddde51-fa75-4eec-95b3-f57023393530"
cwe_ids:
- "CWE-362"
- "CWE-937"
- "CWE-1035"
