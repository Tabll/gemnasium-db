---
identifier: "CVE-2025-24894"
identifiers:
- "CVE-2025-24894"
- "GHSA-36h8-r92j-w9vw"
package_slug: "nuget/SPID.AspNetCore.Authentication"
title: "The AspNetCore Remote Authenticator for SPID Allows SAML Response Signature
  Verification Bypass"
description: "Authentication using Spid and CIE is based on the SAML2 standard which
  provides for two entities:\n\nIdentity Provider (IdP): the system that authenticates
  users and provides identity information ( SAML assertions ) to the Service Provider,
  essentially, it is responsible for managing user credentials and identity;\nService
  Provider (SP): The system that provides a service to the user and relies on the
  Identity Provider to authenticate the user, receives SAML assertions from the IdP
  to grant access to resources.\nThe library `spid-aspnetcorerefers` to the second
  entity, i.e. the SP, and implements the validation logic of the SAML assertions
  present within the SAML response . The following is a summary diagram of an authentication
  flow via SAML:\n\n![](https://github.com/user-attachments/assets/5b10c8f8-5121-446f-95f8-c0355daa5959)\n\nAs
  shown in the diagram, the IdP, after verifying the user's credentials, generates
  a signed SAML response, this is propagated to the SP by the user's browser and the
  SP, after verifying the signature, can extract the data needed to build the user's
  session.\n\nThe signature validation logic is central as it ensures that you cannot
  craft a SAML response with arbitrary assertions and thus impersonate other users.\n\nThe
  following is the validation code implemented in `spid-aspnetcore`.\n\n```csharp\ninternal
  static bool VerifySignature(XmlDocument signedDocument, IdentityProvider? identityProvider
  = null){\n//...SNIP...\nSignedXml signedXml = new SignedXml(signedDocument);\nif
  (identityProvider is not null)\n{\nbool validated = false;\nforeach (var certificate
  in identityProvider.X509SigningCertificates){\nvar publicMetadataCert = new X509Certificate2(Convert.FromBase64String(certificate));\nXmlNodeList
  nodeList = (signedDocument.GetElementsByTagName(\"ds:Signature\")?.Count > 1) ?\nsignedDocument.GetElementsByTagName(\"ds:Signature\")
  :\n(signedDocument.GetElementsByTagName(\"ns2:Signature\")?.Count > 1) ?\nsignedDocument.GetElementsByTagName(\"ns2:Signature\")
  :\nsignedDocument.GetElementsByTagName(\"Signature\");\nsignedXml.LoadXml((XmlElement)nodeList[0]);\nvalidated
  |= signedXml.CheckSignature(publicMetadataCert, true);\n}\nreturn validated;\n}\nelse{\nXmlNodeList
  nodeList = (signedDocument.GetElementsByTagName(\"ds:Signature\")?.Count > 0) ?\nsignedDocument.GetElementsByTagName(\"ds:Signature\")
  :\nsignedDocument.GetElementsByTagName(\"Signature\");\nsignedXml.LoadXml((XmlElement)nodeList[0]);\nreturn
  signedXml.CheckSignature();\n}\n//...SNIP...\n}\n```\n\nThe parameter `signedDocument`
  contains the SAML response in XML format, while the parameter `identityProvider`
  can contain the IdP info. If the parameter `identityProvider` has been specified,
  the public certificates of that IdP are extracted, so as to force their use during
  the signature verification, otherwise the certificates configured within the application
  are used.\n\nNext, a response envelope is generated nodeList within which all XML
  elements containing an XML signature of part or all of the SAML response envelope
  are saved.\n\nFinally, the first element of this list, i.e. the first signature
  found, is extracted and verified.\n\nIn a normal authentication flow, the SAML response
  looks like this (note that some fields and attributes have been omitted for ease
  of reading):\n\n```xml\n<samlp:Response ID=\"response_id\" IssueInstant=\"2025-01-07T13:37:00Z\"
  Version=\"2.0\" xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n<saml:Issuer
  Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\">\nhttps://demo.spid.gov.it/validator\n</saml:Issuer>\n<ds:Signature
  xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n<ds:SignedInfo>\n<ds:CanonicalizationMethod
  Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n<ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/>\n<ds:Reference
  URI=\"#response_id\">\n<ds:Transforms>\n<ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>\n</ds:Transforms>\n<ds:DigestMethod
  Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>\n<ds:DigestValue>\n<!--
  DIGEST -->\n</ds:DigestValue>\n</ds:Reference>\n</ds:SignedInfo>\n<ds:SignatureValue>\n<!--
  SIGNATURE -->\n</ds:SignatureValue>\n<ds:KeyInfo>\n<ds:X509Data>\n<ds:X509Certificate>\n<!--
  CERTIFICATE -->\n</ds:X509Certificate>\n</ds:X509Data>\n</ds:KeyInfo>\n</ds:Signature>\n<samlp:Status>\n<samlp:StatusCode
  Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\"/>\n</samlp:Status>\n<saml:Assertion
  ID=\"assertion_id\" IssueInstant=\"2025-01-07T13:37:00Z\" Version=\"2.0\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"
  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n<saml:Issuer Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\">\nhttps://demo.spid.gov.it/validator\n</saml:Issuer>\n<ds:Signature
  xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n<ds:SignedInfo>\n<ds:CanonicalizationMethod
  Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n<ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/>\n<ds:Reference
  URI=\"#assertion_id\">\n<ds:Transforms>\n<ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>\n</ds:Transforms>\n<ds:DigestMethod
  Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>\n<ds:DigestValue>\n<!--
  DIGEST -->\n</ds:DigestValue>\n</ds:Reference>\n</ds:SignedInfo>\n<ds:SignatureValue>\n<!--
  SIGNATURE -->\n</ds:SignatureValue>\n<ds:KeyInfo>\n<ds:X509Data>\n<ds:X509Certificate>\n<!--
  CERTIFICATE -->\n</ds:X509Certificate>\n</ds:X509Data>\n</ds:KeyInfo>\n</ds:Signature>\n<saml:AttributeStatement>\n<saml:Attribute
  Name=\"spidCode\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\">\n<saml:AttributeValue
  xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
  xsi:type=\"xs:string\">\nAGID-001\n</saml:AttributeValue>\n</saml:Attribute>\n<!--
  ... SNIP ... -->\n</saml:AttributeStatement>\n</saml:Assertion>\n</samlp:Response>\n```\n\nThe
  SDK code would get as the first element of the `nodeList`, that is `nodeList[0]`,
  the signature referring to the entire SAML response, in fact the reference of the
  first signature `<ds:Reference URI=\"#response_id\">` points to the root object
  `<samlp:Response ID=\"response_id\" ...>`. Therefore, verifying this signature will
  ensure that the entire content of the SAML response is intact and authentic.\n\nHowever,
  there is no guarantee that the first signature refers to the root object, so if
  an attacker injects a signed element as the first element, all other signatures
  will not be verified. The only requirement is to have a legitimately signed XML
  element from the IdP, which is easily accomplished using the public metadata of
  the IdP.\n\nThe SAML response would be structured like this:\n\n![](https://github.com/user-attachments/assets/42b8c97a-96ae-45c9-afed-aab7066201a1)"
date: "2025-02-18"
pubdate: "2025-02-18"
affected_range: "[,3.4.0)"
fixed_versions:
- "3.4.0"
affected_versions: "All versions before 3.4.0"
not_impacted: "All versions starting from 3.4.0"
solution: "Upgrade to version 3.4.0 or above."
urls:
- "https://nvd.nist.gov/vuln/detail/CVE-2025-24894"
- "https://github.com/advisories/GHSA-36h8-r92j-w9vw"
- "https://github.com/italia/spid-aspnetcore/security/advisories/GHSA-36h8-r92j-w9vw"
- "https://github.com/italia/spid-aspnetcore/commit/093efa2273f8a1e0481f678a0bfcd57fbdc7b029"
- "https://github.com/italia/spid-aspnetcore"
cvss_v3: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N"
uuid: "97946bad-b6b4-4bef-87ed-cee0938a0dc4"
cwe_ids:
- "CWE-290"
- "CWE-937"
- "CWE-1035"
